## STL-常用容器

string容器：
    与char*的区别：
        char*是一个指针
        string是一个类，类内部封装了char*，管理这个这个字符串，是一个char*型的容器

vector容器：
    与数组相似，称为单端数组
    数组是静态的，vector是动态的，可以扩展
    声明：
        vector<int> v;
        vector<vector<int>> v2;
    语法：
        v.empty(); // 判断容器是否为空
        v.capacity(); // 容器的容量
        v.size(); // 返回容器中元素的个数
        v.resize(num, elem); // 重新指定容器的长度为num，若容器变长，则以默认值0或elem值填充新位置
        
        v.push_back(ele); // 尾部插入元素ele
        v.pop_back(); // 删除最后一个元素

        v.insert(const_iterator pos, ele); // 迭代器指向位置pos插入元素ele
        v.insert(const_iterator pos, int count, ele); // 迭代器指向位置pos插入count个元素ele
        v.erase(const_iterator pos); // 删除迭代器指向的元素
        v.erase(const_iterator start, const_iterator end); // 删除迭代器从start到end之间的也元素
        v.clear(); // 删除容器中的所有元素

        v.at(int idx); // 返回索引idx所指的数据
        v.front(); // 返回容器中第一个数据元素
        v.back(); // 返回容器中最后一个数据元素
    vector的遍历：
        for(vector<vector<int>>::iterator it = v.begin(); it != v.end(); it++)
        {
            for(ventor<int>::iterator vit = (*it).begin(); vit != (*it).end(); vit++)
            {
                cout << *vit << endl; // 取值运算
            }
        }

deque容器：
    双端数组，可以对头端进行插入删除操作
    与vector的区别：
        vector对于头部的插入删除效率低，数据量越大，效率越低
        deque相对而言，对头部的插入删除速度比vector快
        vector访问元素时的速度会比deque快
    deque内部原理：
        内部有个中控器，维护每段缓冲区中的内容，缓冲区中存放真实数据，中控器维护缓冲区的地址
    声明：
        deque<int> deqT;
        deque<deque<int>> deqT2;
    语法：
        deqT.empty(); // 判断容器是否为空
        deqT.size(); // 返回容器中元素的个数
        deqT.resize(num, elem); // 重新指定容器的长度为num，若容器变长，则以默认值0或elem值填充新位置

        deqT.push_back(elem); // 在容器尾部添加一个数据
        deqT.push_front(elem); // 在容器头部插入一个数据
        deqT.pop_back(); // 删除容器最后一个数据
        deqT.pop_front(); // 删除容器第一个数据

        deqT.insert(pos, elem); // 在pos位置插入一个elem元素的拷贝，返回新数据的位置
        deqT.insert(pos, n, elem); // 在pos位置插入n个elem数据，无返回值
        deqT.insert(pos, beg, end); // 在pos位置插入[beg, end]区间的数据，无返回值
        deqT.clear(); // 清空容器的所有数据
        deqT.earse(beg, end); // 删除[beg, end]区间的数据，返回下一个数据的位置
        deqT.earse(pos); // 删除pos位置的数据，返回下一个数据的位置

        deqT.at(int idx); // 返回索引idx所指的数据
        deqT.front(); // 返回容器中第一个数据元素
        deqT.back(); // 返回容器中最后一个数据元素

stack容器：
    stack是一种先进后出的数据结构，只有一个出口
    栈中只有顶端的元素才可以被外界使用，因此栈不允许有遍历行为
    声明：
        stack<int> stk;
    语法：
        stk.empty(); // 判断栈是否为空
        stk.size(); // 返回栈的大小

        stk.push(elem); // 向栈顶添加元素
        stk.pop(); // 从栈顶移除一个元素
        stk.top(); // 返回栈顶元素

queue容器：
    queue是一种先进先出的数据结构，有两个出口
    允许从一端新增元素，从另一端移除元素
    只有队头和队尾才可以被外界访问，因此不允许有遍历行为
    声明：
        queue<int> que;
    语法：
        que.empty(); // 判断队列是否为空
        que.size(); // 返回队列的大小

        que.push(elem); // 往队尾添加元素
        que.pop(); // 从队头移除第一个元素
        que.back(); // 返回最后一个元素
        que.front(); // 返回第一个元素

list容器：
    将数据进行链式存储
    链表是一种物理存储单元上非连续的存储结构，数据元素的逻辑顺序是通过链表中的指针链接实现的
    链表的存储方式并不是连续的内存空间，因此链表list中的迭代器只支持前移和后移，属于双向迭代器
    由一系列的结点组成
    结点的组成：
        一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域
    list的优点：
        采用动态存储分配，不会造成内存浪费和溢出
        链表执行插入和删除操作十分方便，修改指针即可，不需要移动大量元素
    list的缺点：
        链表灵活，但是空间（指针域）和时间（遍历）额外耗费较大
    声明：
        list<int> lst;
    语法：
        lst.assign(beg, end); // 将[beg, end)区间中的数据拷贝赋值给本身
        lst.assign(n, elem); // 将n个elem拷贝赋值给本身
        lst.swap(lst); // 将lst与本身的元素互换

        lst.empty(); // 判断容器是否为空
        lst.size(); // 返回容器中元素的个数
        lst.resize(num, elem); // 重新指定容器的长度为num，若容器变长，则以elem值填充新位置

        lst.push_back(elem); // 在容器尾部加入一个元素
        lst.pop_back(); // 删除容器中最后一个元素
        lst.push_front(elem); // 在容器开头插入一个元素
        lst.pop_front(); // 在容器开头移除一个元素
        lst.insert(pos, elem); // 在pos位置插elem元素的拷贝，返回新数据位置
        lst.insert(pos, n, elem); // 在pos位置插入n个elem数据，无返回值
        lst.insert(pos, beg, end); // 在pos位置插入[beg, end)区间的数据，无返回值
        lst.clear(); // 移除容器中的所有数据
        lst.earse(beg, end); // 删除[beg, end)区间的数据，返回下一个数据的位置
        lst.earse(pos); // 删除pos位置的数据，返回下一个数据的位置
        lst.remove(elem); // 删除容器中所有与elem值匹配的元素

        lst.front(); // 返回第一个元素
        lst.back(); // 返回最后一个元素

        lst.reverse(); // 反转链表
        lst.sort(); // 链表排序

set/multiset容器：
    所有元素都会在插入时自动被排序
    本质：
        set/multiset属于关联式容器，底层结构是用二叉树实现
    区别：
        set不允许容器中有重复的元素
        multiset允许容器中有重复的元素
        set不可以插入重复数据，而multiset可以
        set插入数据的同时会返回插入结果，表示插入是否成功
        multiset不会检测数据，因此可以插入重复数据
    set声明：
        set<int> st;
    set语法：
        st.empty(); // 判断容器是否为空
        st.size(); // 返回容器中元素的数目
        st.swap(st); // 交换两个集合容器

        st.insert(elem); // 在容器中插入元素
        st.clear(); // 清除所有元素
        st.earse(pos); // 删除pos迭代器所指的元素，返回下一个元素的迭代器
        st.earse(beg, end); // 删除区间[beg, end)的所有元素，返回下一个元素的迭代器
        st.earse(elem); // 删除容器中值为elem的元素

        st.find(key); // 查找key是否存在，若存在，返回改键的元素迭代器；若不存在，返回st.end();
        st.count(key); // 统计key的元素个数
    pair对组创建：
        创建方式：
            1. pair<type, type> p(value1, value2);
            2. pair<type, type> p = make_pair(value1, value2);
        访问：
            p.first
            p.second

map/multimap容器：
    map中的所有元素都是pair
    pair中第一个元素为key（键值），起到索引作用，第二个元素为value（实值）
    所有元素都会根据元素的键值自动排序
    本质：
        map/multimap属于关联式容器，底层结构是用二叉树实现
    优点：
        可以根据key值快速找到value值
    区别：
        map不允许容器中有重复key值元素
        multimap允许容器中有重复key值元素
    声明：
        map<T1, T2> mp;
    语法：
        mp.empty(); // 判断容器是否为空
        mp.size(); // 返回容器中元素的数目

        mp.insert(elem); // 在容器中插入元素
        mp.clear(); // 清除所有元素
        mp.earse(pos); // 删除pos迭代器所指的元素，返回下一个元素的迭代器
        mp.earse(beg, end); // 删除区间[beg, end)的所有元素，返回下一个元素的迭代器
        mp.earse(key); // 删除容器中值为key的元素

        mp.find(key); // 查找key是否存在，若存在，返回该键的元素的迭代器；若不存在，返回set.end()
        mp.count(key); // 统计key的元素个数


## STL-函数对象

函数对象
    概念：
        重载函数调用操作符的类，其对象常称为函数对象
        函数对象使用重载的()时，行为类似函数调用，也叫仿函数
    本质：
        函数对象（仿函数）是一个类，不是一个函数

谓词：
    概念：
        返回bool类型的仿函数称为谓词
        如果operator()接受一个参数，那么叫做一元谓词
        如果operator()接受两个参数，那么叫做二元谓词

内建函数对象：
    分类：
        算术仿函数
        关系仿函数
        逻辑仿函数


## STL-常用算法
    算法主要由头文件<algorithm>、<functional>、<numeric>组成
    <algorithm>是所有STL头文件中最大的一个，范围涉及到比较、交换、查找、遍历操作、复制、修改等
    <numeric>体积很小，只包括几个序列上面进行简答数学运算的模板函数
    <functional>定义了一些模板类，用以声明函数对象

常用遍历算法：
    for_each：
        实现遍历容器
        函数原型：
            for_each(iterator beg, iterator end, _func);
            // beg 开始迭代器
            // end 结束迭代器
            // _func 函数或者函数对象
    transform：
        搬运容器到另一个容器中
        函数原型：
            transform(iterator beg1, iterator end1, iterator beg2, _func)
            // beg1 源容器开始迭代器
            // end1 源容器结束迭代器
            // beg2 目标容器开始迭代器
            // _func 函数或者函数对象

常用查找算法：
    find：
        查找指定元素，找到返回指定位置迭代器，找不到返回结束迭代器位置
        函数原型：
            find(iterator beg, iterator end, value)
            // beg 开始迭代器
            // end 结束迭代器
            // value 查找的元素
    find_if:
        按条件查找元素
        函数原型：
            find_if(iterator beg, iterator end, _Pred)
            // beg 开始迭代器
            // end 结束迭代器
            // _Pred 函数或者谓词（返回bool类型的仿函数）
    adjacent_find:
        查找相邻重复元素
        函数原型：
            adjacent_find(iterator beg, iterator end)
            // beg 开始迭代器
            // end 结束迭代器
    binary_search:
        查找指定元素是否存在
        函数原型：
            bool binary_search(iterator beg, iterator end, value)
            // 查到返回true，否则返回false
            // 无序序列中不可用
            // beg 开始迭代器
            // end 结束迭代器
            // value 查找的元素
    count:
        统计元素个数
        函数原型：
            count(iterator beg, iterator end, value)
            // beg 开始迭代器
            // end 结束迭代器
            // value 统计的元素
    count_if:
        按条件统计元素个数
        count_if(iterator beg, iterator end, _Pred)
        // beg 开始迭代器
        // end 结束迭代器
        // _Pred 谓词

常用排序算法：
    sort:
        对容器内元素进行排序
        函数原型：
            sort(iterator beg, iterator end, _Pred)
            // beg 开始迭代器
            // end 结束迭代器
            // _Pred 谓词



            