i++：先使用再+1（不可以作为左值）
++i：先+1再使用（效率更高，可以作为左值）

指针大小和系统位数有关，16位系统2个字节，32位4个字节，64位8个字节

初始化为NULL的类指针，可以安全的调用不涉及类成员变量的类成员函数而不会出错

printf("s[]=%6.9s\n", s); // 表示显示一个长度不小于6且不大于9的字符串

友元函数不能被继承；友元函数没有this指针

包含纯虚函数的基类可定义指向派生类对象的基类指针和派生类对象的引用，不能直接定义自身对象

引用不能用const修饰，指针可以；引用创建时必须初始化，指针则可以在任何时候被初始化

随机数设置：
    #include<ctime>
    srand(time(NULL));
    int i = rand()/40 + 60;

c++数学运算：
    #include<cmath>
    次方：pow(m, n)
    平方根：sqrt(m)
    正弦：sin(m)
    绝对值：abs(n)
#include <iomanip>
cout << setiosflags(ios::fixed) << setprecision(2) << sum << endl;

c++四种强制类型转换方式及应用场景：
    1. staric_cast
        最常用的类型转换符
        比如int转换为float：f = staric_cast<float>(i);
    2. const_cast
        用于把const类型的指针变为非const类型的指针
        比如：const int* fun(int x, int y){}   int* ptr = const_cast<int*>(fun(2, 3))
    3. dynamic_cast
        该操作符用于运行时检查该转换是否类型安全，但只在多态类型时合法，即该类至少具有一个虚拟方法
    4. reinterpret_cast
        interpret是解释的意思，reinterpret即为重新解释，此标识符的意思即为数据的二进制形式重新解释，但是不改变其值

字符串切片：
    #include<sstream>
    string s;
    cin >> s;
    stringstream ss;
    ss << s;
    string a;
    getline(ss, a, ',');