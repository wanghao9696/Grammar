########## C++基础入门 ##########

变量：
    C++在创建变量时，必须给变量一个初始值，否则会报错

常量：
    #define 宏常量：
        #define 常量名 常量值
        （通常在文件上方定义，表示一个常量）
    const修饰的变量：
        const 数据类型 常量名=常量值
        （通常在变量定义前加关键字const==，修饰该变量为常量，不可修改）

数据类型：
    整型：
        short（短整型）  2字节  (-2^15 ~ 2^15-1)
        int（整型）  4字节  (-2^31 ~ 2^31-1)
        long（长整型）  4或8字节  (-2^31 ~ 2^31-1)
        long long（长长整型）  8字节  (-2^63 ~ 2^63-1)
    sizeof关键字：
        （用于统计数据类型所占内存的大小）
        sizeof(数据类型/变量)
    浮点型：
        float（单精度）  4字节  7位有效数字
        double（双精度）  8字节  15～16位有效数字
    字符型：
        char ch = 'a';   1个字节
        （并不是把字符本身放到内存中，而是将对应的ASCII编码放到存储单元）
    转义字符：
        \a 警报；\b 退格，将当前位置移到前一列；\f 换页，将当前位置移到下一页开头；
        \n 换行；\r 回车，将当前位置移到本行开头；\t 水平制表，跳到下一个TAB位置；
        \0 数字0；\ddd 8进制转义字符，d范围0～7；\xhh 16进制转义字符
    字符串型：
        （c风格）char 变量名[] = "字符串值";
        （c++风格）string 变量名 = "字符串值";
            需要加入头文件 #include<string>）
    布尔类型bool：
        true  真  本质是1  1个字节
        false  假  本质是0  1个字节
    数据的输入：
        cin >> 变量;
            例：double d = 0; cin >> d;  &&  string str; cin >> str;

运算符：
    优先级：算术运算符 > 比较运算符 > 逻辑运算符 > 赋值运算符

选择结构：
    if语句：
        if(表达式){
            表达式
        }
        else if(表达式){
            表达式
        }
        else{
            表达式
        }
    三目运算符：
        表达式1 ? 表达式2 : 表达式3
        （如果表达式1为真，执行表达式2，并返回表达式2的结果）
        （如果表达式1为假，执行表达式3，并返回表达式3的结果）
    switch语句：
        switch(表达式){
            case 结果1: 执行语句; break;
            case 结果2: 执行语句; break;
            ...
            default: 执行语句； break；
        }

循环结构：
    while循环语句：
        while(循环条件){
            循环语句；
        }
    do...while循环语句：
        do{
            循环语句；
        }while(循环条件)
    for循环语句：
        for(初始值; 条件表达式; 末尾循环体){
            循环语句；
        }

跳转语句：
    break语句：
        （用于跳出选择或者循环结构）
        ·出现在switch语句中，作用是终止case并跳出switch
        ·出现在循环语句中，作用是跳出当前的循环语句
        ·出现在嵌套语句中，跳出最近的内层循环嵌套
    continue语句：
        （用于循环语句中）
        ·在跳出本次循环中未执行的语句，继续执行下一次循环
    goto语句：
        goto 标记;
        （可以无条件跳转语句，如果标记的名称存在，执行到goto语句时，会跳转到标记的位置）

数组：
    概念：
        一个集合，里面存放了相同类型的数据元素
    特点：
        1. 数组中的每个数据元素都是“相同的数据类型”；
        2. 数组是由“连续的内存”位置组成；
    一维数组的声明：
        1. 数据类型 数组名[数组长度];
        2. 数据类型 数组名[数组长度] = {值1, 值2, ...};
        3. 数据类型 数组名[] = {值1, 值2, ...};
    一维数组名称的含义：
        可以获取数组在内存中的首地址；（直接打印数组名，得到数组所占内存的首地址）
        可以统计整个数组在内存中的长度；（对数组名进行sizeof，可以获取整个数组占内存空间的大小）
    二维数组的声明：
        1. 数据类型 数组名[行数][列数];
        1. 数据类型 数组名[行数][列数] = {{数据1, 数据2}, {数据3, 数据4}};
        1. 数据类型 数组名[行数][列数] = {数据1, 数据2, 数据3, 数据4};
        1. 数据类型 数组名[][列数] = {数据1, 数据2, 数据3, 数据4};
    二维数组名称的含义：
        二维数组名就是这个数组的首地址；（直接打印数组名得到）
        获取二维数组占用的内存空间的大小；（对二维数组名进行sizeof）

函数：
    作用：
        将一段经常使用的代码封装起来，减少重复代码；
    函数的定义：
        1. 返回值类型；
        2. 函数名；
        3. 参数列表；
        4. 函数体语句；
        5. return表达式；
    语法：
        返回值类型 函数名(参数列表){
            函数体语句;
            return表达式;
        }
    值传递：
        函数调用时实参将数值传入给形参；
        （值传递时，如果形参发生，并不会影响实参）
    函数的声明：
        函数的声明可以多次，但是函数的定义只能有一次；
    函数的分文件编写：
        1. 创建后缀名为.h的头文件；
        2. 创建后缀名为.cpp的源文件；
        3. 在头文件中写函数的声明；
        4. 在源文件中写函数的定义；
    
指针：
    作用：
        通过指针间接访问内存
        （内存编号是从0开始记录的，一般用十六进制数字表示）
        （可以利用指针变量保存地址）
    指针变量的声明：
        数据类型 * 变量名;
    指针变量和普通变量的区别：
        指针变量存放的是数据，指针变量存放的是地址；
        指针变量可以通过"*"操作符，操作指针变量指向的内存空间，这个过程称为解引用；（取值）
        指针变量也是种数据类型，64位操作系统下占8字节；
    空指针：
        int * p = NULL;
        指针变量指向内存中编号为0的空间；
        用途：初始化指针变量
        注意：空指针指向的内存是不可以访问的
    野指针：
        指针变量指向非法的内存空间；
    const修饰指针：
        1. const修饰指针——常量指针（指针指向可以改，指针指向的值不可以更改）
        2. const修饰常量——指针常量（指针指向不可以改，指针指向的值可以更改）
        3. const既修饰指针，又修饰常量（都不可改）
    指针和数组：
        利用指针访问数组中的元素（int * p = arr;  *p, *(p+1), ...）
    指针和函数：
        利用指针作函数参数，可以修改实参的值
        （如果不想修改实参，就用值传递，如果想修改实参，就用地址传递）
    指针、数组、函数：
        当数组名传入到函数作为参数时，被退化为指向首元素的指针

结构体：
    概念：属于用户“自定义的数据类型”，允许用户存储不同的数据类型；
    语法：
        struct 结构体名{ 结构体成员列表 };
    声明：
        ·struct 结构体名 变量名;
        ·struct 结构体名 变量名 = {成员1值, 成员2值, ...};
        ·定义结构体时顺便创建变量;
    例：
        struct student{
            string name;
            int age;
            int score;
        }stu3;  //  定义结构体时直接创建变量stu3
        struct student stu1;  // 创建结构体变量stu1
        stu1.name = "张三";
        stu1.age = 18;
        stu1.score = 100;
    说明：
        定义结构体时的关键字是struct，不可省略
        创建结构体变量时，关键字struct可以省略
        结构体变量利用操作符"."访问成员
    结构体数组：
        概念：将自定义的结构体放入数组中方便维护
        语法：
            struct 结构体名 数组名[元素个数] = {{}, {}, ..., {}}
        例：
            struct student arr[3] = {
                {"张三", 18, 90},
                {"李四", 19, 60},
                {"王五", 17, 70}
            };
    结构体指针：
        作用：通过指针访问结构体中的成员
        （利用操作符"->"可以通过结构体指针访问结构体属性）
        例：
            struct student stu = {"张三", 18, 100, };
            struct student * p = &stu;
            cout << stu->name << endl;
    结构体嵌套结构体：
        结构体中的成员可以是另一个结构体
        例：
            struct teacher{
                int id;
                string name;
                int age;
                struct student stu;
            }
    结构体做函数参数：
        将结构体作为参数向函数中传递
        传递方式：
            值传递（不会修改实参的值）
            地址传递（可以修改实参的值）
    结构体中const使用场景：
        用const来防止误操作